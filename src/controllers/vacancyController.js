import Vacancy from "../models/vacancyModel.js";
import { transporter } from "../utils/mailer.js";
import User from "../models/authModel.js";
export const getVacancy = async (req, res) => {
  try {
    let query = { isApproved: true }; // default olaraq yalnƒ±z t…ôsdiql…ônmi≈ül…ôri g√∂st…ôr

    if (req.user && req.user.role === "admin") {
      query = {}; // admin hamƒ±sƒ±nƒ± g√∂r√ºr
    }

    const vacancies = await Vacancy.find(query).sort({ createdAt: -1 });
    return res.status(200).json(vacancies);
  } catch (error) {
    return res.status(500).json({
      message: "internal server error",
      error: error.message,
    });
  }
};


export const getVacancyById = async (req, res) => {
  try {
    const { id } = req.params;
    const vacancy = await Vacancy.findById(id);

    if (!vacancy) {
      return res.status(404).json({ message: "Vacancy not found ‚ùå" });
    }

    return res.status(200).json(vacancy);
  } catch (error) {
    return res.status(500).json({
      message: "Internal server error",
      error: error.message,
    });
  }
};

export const deleteVacancyAll = async (req, res) => {
  try {
    const result = await Vacancy.deleteMany();
    return res.status(200).json({
      message: "deleted successfully",
      deletedCount: result.deletedCount,
    });
  } catch (error) {
    return res.status(500).json({
      message: "internal server error",
      error: error.message,
    });
  }
};

export const deleteVacancyById = async (req, res) => {
  try {
    const { id } = req.params
    const deletedVacancy = await Vacancy.findByIdAndDelete(id)
    if (!deletedVacancy) {
      return res.status(404).json({ message: "cannot find vacancy" })
    }
    return res.status(200).json({ message: "deleted successfully" })

  } catch (error) {
    return res.status(500).json({ message: "internal serve error", error: error.message })

  }

}
export const postVacancy = async (req, res) => {
  try {
    const {
      logo,
      title,
      org,
      deadline,
      location,
      category,
      type,
      workplace,
      paymentType,
      salary,
      featured = false,
      urgent = false,
      experience,
      education,
      description,
      requirements = [],
      responsibilities = [],
      benefits = [],
      tags = [],
      companyInfo,
      applicationMethod = "internal",
      applicationEmail,
      externalApplicationUrl,
      contractType,
      languages = [],
      ageRange,
      metaDescription,
      eventType,
    } = req.body;

    // ∆èsas validation
    if (!title || !org || !location || !category || !type || !workplace || !paymentType || !experience || !education || !description || !companyInfo?.name || !eventType) {
      return res.status(400).json({ message: "Z…ôruri sah…ôl…ôr doldurulmalƒ±dƒ±r" });
    }

    if (paymentType === "paid" && !salary) {
      return res.status(400).json({ message: "√ñd…ôni≈üli i≈ü √º√ß√ºn maa≈ü g√∂st…ôrilm…ôlidir" });
    }

    console.log("üìù Creating vacancy...");
    console.log("üë§ User from req:", req.user);

    // Yeni vacancy yaradƒ±lƒ±r
    const newVacancy = new Vacancy({
      logo,
      title,
      org,
      postedTime: new Date(),
      deadline: deadline ? new Date(deadline) : null,
      location,
      category,
      type,
      workplace,
      paymentType,
      salary: paymentType === "paid" ? salary : null,
      views: 0,
      applicants: 0,
      featured,
      urgent,
      experience,
      education,
      description,
      requirements,
      responsibilities,
      benefits,
      tags,
      companyInfo,
      slug: title.toLowerCase().replace(/[^a-z0-9]+/g, "-") + "-" + Date.now(),
      metaDescription: metaDescription || description.substring(0, 160),
      status: "active",
      isApproved: null,
      applicationMethod,
      applicationEmail,
      externalApplicationUrl,
      contractType,
      languages,
      ageRange,
      eventType,
      
      // ‚úÖ D√úZ∆èLDILMI≈û: User ObjectId-ni d√ºzg√ºn saxlayƒ±rƒ±q
      createdBy: req.user?.id || req.user?._id || null, // ObjectId kimi
    });

    const savedVacancy = await newVacancy.save();

    console.log("‚úÖ Vacancy saved with createdBy:", savedVacancy.createdBy);

    // Admin email g√∂nd…ôr
    try {
      await transporter.sendMail({
        from: process.env.EMAIL_USER,
        replyTo: req.user?.email,
        to: process.env.ADMIN_EMAIL,
        subject: "Yeni vakansiya …ôlav…ô olundu - T…ôsdiq g√∂zl…ôyir",
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background: linear-gradient(135deg, #667eea, #764ba2); padding: 30px; text-align: center;">
              <h1 style="color: white; margin: 0;">üìã Yeni Vakansiya</h1>
            </div>
            <div style="background: white; padding: 30px;">
              <h2 style="color: #333;">Yeni vakansiya t…ôsdiq g√∂zl…ôyir</h2>
              <div style="background: #f8f9fa; border-radius: 8px; padding: 20px; margin: 20px 0;">
                <p><strong>Ba≈ülƒ±q:</strong> ${savedVacancy.title}</p>
                <p><strong>≈ûirk…ôt:</strong> ${savedVacancy.org}</p>
                <p><strong>Kateqoriya:</strong> ${savedVacancy.category}</p>
                <p><strong>Lokasiya:</strong> ${savedVacancy.location}</p>
                <p><strong>Yaradƒ±cƒ±:</strong> ${req.user?.name || req.user?.username || 'Anonim'}</p>
              </div>
              <p style="color: #666;">
                Z…ôhm…ôt olmasa admin paneld…ôn vakansiyanƒ± t…ôsdiql…ô.
              </p>
            </div>
          </div>
        `,
      });

      console.log("‚úÖ Admin email sent");
    } catch (emailError) {
      console.error("‚ùå Admin email error:", emailError.message);
    }

    return res.status(201).json({
      success: true,
      message: "Vakansiya …ôlav…ô olundu ‚úÖ (admin t…ôsdiqi g√∂zl…ôyir)",
      data: savedVacancy,
    });
  } catch (error) {
    console.error("üí• Vacancy yaratmaqda x…ôta:", error);
    return res.status(500).json({ 
      success: false, 
      message: "Server x…ôtasƒ±", 
      error: error.message 
    });
  }
};

// export const postVacancy = async (req, res) => {
//   try {
//     const {
//       logo,
//       title,
//       org,
//       deadline,
//       location,
//       category,
//       type,
//       workplace,
//       paymentType,
//       salary,
//       featured = false,
//       urgent = false,
//       experience,
//       education,
//       description,
//       requirements = [],
//       responsibilities = [],
//       benefits = [],
//       tags = [],
//       companyInfo,
//       applicationMethod = "internal",
//       applicationEmail,
//       externalApplicationUrl,
//       contractType,
//       languages = [],
//       ageRange,
//       metaDescription,
//       eventType,
//     } = req.body;

//     // ∆èsas validation
//     if (!title || !org || !location || !category || !type || !workplace || !paymentType || !experience || !education || !description || !companyInfo?.name || !eventType) {
//       return res.status(400).json({ message: "Z…ôruri sah…ôl…ôr doldurulmalƒ±dƒ±r" });
//     }

//     if (paymentType === "paid" && !salary) {
//       return res.status(400).json({ message: "√ñd…ôni≈üli i≈ü √º√ß√ºn maa≈ü g√∂st…ôrilm…ôlidir" });
//     }

//     // Yeni vacancy yaradƒ±lƒ±r
//     const newVacancy = new Vacancy({
//       logo,
//       title,
//       org,
//       postedTime: new Date(),
//       deadline: deadline ? new Date(deadline) : null,
//       location,
//       category,
//       type,
//       workplace,
//       paymentType,
//       salary: paymentType === "paid" ? salary : null,
//       views: 0,
//       applicants: 0,
//       featured,
//       urgent,
//       experience,
//       education,
//       description,
//       requirements,
//       responsibilities,
//       benefits,
//       tags,
//       companyInfo,
//       slug: title.toLowerCase().replace(/[^a-z0-9]+/g, "-") + "-" + Date.now(),
//       metaDescription: metaDescription || description.substring(0, 160),
//       status: "active",
//       isApproved: false, // production √º√ß√ºn false
//       applicationMethod,
//       applicationEmail,
//       externalApplicationUrl,
//       contractType,
//       languages,
//       ageRange,
//       eventType,
//       createdBy: req.user?.id || null
//     });

//     const savedVacancy = await newVacancy.save();

//     // Admin email g√∂nd…ôr
//   await transporter.sendMail({
//   from: process.env.EMAIL_USER,     // s…ônin Gmail hesabƒ±n olmalƒ±dƒ±r
//   replyTo: req.user.email,          // istifad…ô√ßi emaili burada
//   to: process.env.ADMIN_EMAIL,      // admin email
//   subject: "Yeni vakansiya …ôlav…ô olundu - T…ôsdiq g√∂zl…ôyir",
//   html: `
//     <h2>Yeni vakansiya …ôlav…ô edildi</h2>
//     <p><b>Ba≈ülƒ±q:</b> ${savedVacancy.title}</p>
//     <p><b>≈ûirk…ôt:</b> ${savedVacancy.org}</p>
//     <p><b>Kateqoriya:</b> ${savedVacancy.category}</p>
//     <p><b>Lokasiya:</b> ${savedVacancy.location}</p>
//     <br/>
//     <p>Z…ôhm…ôt olmasa admin paneld…ôn t…ôsdiql…ô.</p>
//   `,
// });


//     return res.status(201).json({
//       success: true,
//       message: "Vakansiya …ôlav…ô olundu ‚úÖ (admin t…ôsdiqi g√∂zl…ôyir)",
//       data: savedVacancy,
//     });
//   } catch (error) {
//     console.error("Vacancy yaratmaqda x…ôta:", error);
//     return res.status(500).json({ success: false, message: "Server x…ôtasƒ±", error: error.message });
//   }
// };
// controller
export const approveVacancy = async (req, res) => {
  try {
    const { id } = req.params;

    const vacancy = await Vacancy.findByIdAndUpdate(
      id,
      { isApproved: true },
      { new: true }
    );

    if (!vacancy) return res.status(404).json({ message: "Vakansiya tapƒ±lmadƒ± ‚ùå" });

    return res.status(200).json({ success: true, message: "Vakansiya t…ôsdiq olundu ‚úÖ", data: vacancy });
  } catch (error) {
    console.error("approveVacancy error:", error);
    return res.status(500).json({ success: false, message: "Server x…ôtasƒ±", error: error.message });
  }
};

export const getVacancyBySlug = async (req, res) => {
  try {
    const { slug } = req.params;

    const vacancy = await Vacancy.findOne({ slug })
      .populate('createdBy', 'name email')
      .populate('relatedJobs', 'title org salary slug')
      .exec();

    if (!vacancy) {
      return res.status(404).json({
        success: false,
        message: "Vakansiya tapƒ±lmadƒ±"
      });
    }

    // Views sayƒ±nƒ± artƒ±r (asynchronous)
    vacancy.incrementViews().catch(console.error);

    return res.status(200).json({
      success: true,
      data: { vacancy }
    });

  } catch (error) {
    console.error("Vakansiya m…ôlumatlarƒ±nƒ± almaqda x…ôta:", error);
    return res.status(500).json({
      success: false,
      message: "Server x…ôtasƒ±",
      error: error.message
    });
  }
};

// vacancyController.js - debug version

export const rejectVacancy = async (req, res) => {
  try {
    const { id } = req.params;
    
    console.log("üî¥ REJECT BA≈ûLADI - ID:", id);

    // 1. Vakansiyanƒ± tap v…ô statusu yenil…ô (populate il…ô user m…ôlumatlarƒ±nƒ± da al)
    const updatedVacancy = await Vacancy.findByIdAndUpdate(
      id,
      { isApproved: false },
      { new: true }
    ).populate('createdBy', 'name email username'); // ‚úÖ Populate i≈ül…ôy…ôc…ôk

    if (!updatedVacancy) {
      console.log("‚ùå Vakansiya tapƒ±lmadƒ±");
      return res.status(404).json({ message: "Vakansiya tapƒ±lmadƒ± ‚ùå" });
    }

    console.log("üìù Vakansiya tapƒ±ldƒ± v…ô yenil…ôndi:", updatedVacancy.title);
    console.log("üë§ Created by user:", updatedVacancy.createdBy);

    // 2. Email g√∂nd…ôr
    let emailSent = false;
    if (updatedVacancy.createdBy && updatedVacancy.createdBy.email) {
      try {
        console.log("üìß Email g√∂nd…ôrilir:", updatedVacancy.createdBy.email);
        
        const emailResult = await transporter.sendMail({
          from: process.env.EMAIL_USER,
          to: updatedVacancy.createdBy.email,
          subject: "Vakansiyanƒ±z imtina olundu ‚ùå",
          html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <div style="background: linear-gradient(135deg, #ff6b6b, #ee5a24); padding: 30px; text-align: center;">
                <h1 style="color: white; margin: 0;">‚ö†Ô∏è Vakansiya ƒ∞mtinasƒ±</h1>
              </div>
              <div style="background: white; padding: 30px;">
                <h2 style="color: #333;">Salam ${updatedVacancy.createdBy.name || 'ƒ∞stifad…ô√ßi'},</h2>
                <p style="color: #666;">T…ô…ôss√ºf ki, g√∂nd…ôrdiyiniz vakansiya imtina edilmi≈üdir:</p>
                
                <div style="background: #fff5f5; border: 1px solid #fed7d7; border-radius: 8px; padding: 20px; margin: 20px 0;">
                  <p><strong>üìã Ba≈ülƒ±q:</strong> ${updatedVacancy.title}</p>
                  <p><strong>üè¢ ≈ûirk…ôt:</strong> ${updatedVacancy.org}</p>
                  <p><strong>üìÇ Kateqoriya:</strong> ${updatedVacancy.category}</p>
                  <p><strong>üìç Lokasiya:</strong> ${updatedVacancy.location}</p>
                  <p><strong>üìÖ Tarix:</strong> ${new Date(updatedVacancy.createdAt).toLocaleDateString('az-AZ')}</p>
                </div>
                
                <div style="background: #e6fffa; border: 1px solid #81e6d9; border-radius: 8px; padding: 20px; margin: 20px 0;">
                  <h3 style="color: #234e52; margin: 0 0 10px 0;">üí° N…ô ed…ô bil…ôrsiniz?</h3>
                  <p style="color: #2c7a7b; margin: 0;">
                    M…ôlumatlarƒ± yenid…ôn yoxlayƒ±b d√ºz…ôli≈ü etdikd…ôn sonra yenid…ôn g√∂nd…ôr…ô bil…ôrsiniz.
                  </p>
                </div>
              </div>
              <div style="background: #2d3748; padding: 20px; text-align: center;">
                <p style="color: #a0aec0; margin: 0;">¬© 2024 Vakansiya Platformasƒ±</p>
              </div>
            </div>
          `,
        });

        console.log("‚úÖ Email g√∂nd…ôrildi:", emailResult.messageId);
        emailSent = true;
        
      } catch (emailError) {
        console.error("‚ùå Email x…ôtasƒ±:", emailError.message);
      }
    } else {
      console.log("‚ùå User m…ôlumatlarƒ± v…ô ya email tapƒ±lmadƒ±");
    }

    console.log("üèÅ REJECT TAMAMLANDI");

    return res.status(200).json({
      success: true,
      message: emailSent 
        ? "Vakansiya imtina olundu ‚ùå (Email g√∂nd…ôrildi)" 
        : "Vakansiya imtina olundu ‚ùå (Email g√∂nd…ôril…ô bilm…ôdi)",
      data: updatedVacancy,
      emailSent,
    });

  } catch (error) {
    console.error("üí• REJECT X∆èTASI:", error);
    return res.status(500).json({
      success: false,
      message: "Server x…ôtasƒ±",
      error: error.message,
    });
  }
};
